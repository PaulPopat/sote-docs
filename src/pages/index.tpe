<title>SOTE Docs</title>
<description>
  This is the documentation for SOTE. A modern framework for HTML templating.
</description>
<script area="server">
  return {
    template_html_example: `<template>
  <heading::one property=":props.test">
    Hello world
  </heading::one>
</template>`,
  };
</script>
<template>
  <app::layout at="/">
    <text::header::one>Welcome to SOTE</text::header::one>
    <text::header::two id="welcome">
      A modern framework for HTML templating.
    </text::header::two>
    <text::header::three>What?</text::header::three>
    <text::paragraph>
      SOTE is a JavaScript First framework for building static HTML websites. It
      is a similar concept to systems like NunJucks in that you have a template
      that can resolve variables. It is also a full framework, so it serves your
      pages in a simple SEO friendly way.
    </text::paragraph>
    <text::paragraph>
      The main differences are that components are rendered using HTML tags.
      This makes components feel more semantic and less scary to newer devs. The
      other major difference is that expressions are resolved as straight
      JavaScript. This gives you power to supply templates with functions and
      also access everything that is available to NodeJS servers.
    </text::paragraph>
    <text::paragraph>
      There are also some small quality of life things built in. component CSS
      will automatically be hashed, to allow for simple clean styling. Component
      CSS and JavaScript will also be automatically bundled in an efficient
      fashion, so common code will be included in one file and page specific
      resources in another.
    </text::paragraph>
    <text::code::block language="html">
      {props.template_html_example}
    </text::code::block>
    <text::paragraph>
      If you want to see an example of a larger project using this framework
      then checkout{' '}
      <a
        href="https://github.com/PaulPopat/sote-docs"
        target="_blank"
        rel="noopener"
      >
        the source code for this documentation!
      </a>
    </text::paragraph>
    <text::header::three>Why?</text::header::three>
    <text::paragraph>
      I love modern JavaScript frameworks such as React, VueJS, and Angular.
      With this project, I wanted to build a JavaScript first engine, with
      proper components, but for static HTML templating.
    </text::paragraph>
    <text::paragraph>
      The use cases for this system are for simple static websites, such as
      marketing websites or documentation websites. The system also supports
      POST, PUT, and DELETE methods, so it is easy to make forms with reused
      components. This means it would be a good tool for making admin sections,
      where lots of interactivity is not required.
    </text::paragraph>
    <text::paragraph>
      <b>This should not replace existing frontend frameworks.</b> This tool is
      simple to setup and simple work with but it is not flexible like the
      existing frameworks are. If you require a complex UI with high
      interactivity, use something else and you will have a much better time of
      it!
    </text::paragraph>
  </app::layout>
</template>
